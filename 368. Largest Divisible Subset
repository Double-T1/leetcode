
//brute force
//bottom-up
//time: O(n**3)
//space: O(n**2)
var largestDivisibleSubset = function(nums) {
    nums.sort((a,b) => a-b) //nlogn
    let maxLenArray = []
    let arr = []
    //n**3
    for (let i=0; i<nums.length; i++) {
        arr[i] = [nums[i]]
        for (let j=i-1; j>=0; j--) {
            if (nums[i]%nums[j] === 0 && arr[i].length<arr[j].length+1) {
                arr[i] = [...arr[j],nums[i]] //O(n)
            }
        }
        if (arr[i].length>maxLenArray.length) {
            maxLenArray = arr[i]
        }
    }
   
    return maxLenArray
};

//space-optimization
//time: O(n**2)
//space: O(n)
var largestDivisibleSubset2 = function(nums) {
    nums.sort((a,b) => a-b) //nlogn
    let maxLen = 1
    let maxLenEnd = 0
    let len = []
    let predecessor = []
    //n**2
    for (let i=0; i<nums.length; i++) {
        len[i] = 1
        predecessor[i] = i
        for (let j=i-1; j>=0; j--) {
            if (nums[i]%nums[j] === 0 && len[i]<len[j]+1) {
                len[i] = len[j] + 1
                predecessor[i] = j
            }
        }
        if (maxLen<len[i]) {
            maxLen = len[i]
            maxLenEnd = i
        }
    }

    //construct the LDS
    let ans = []
    while (maxLenEnd != predecessor[maxLenEnd]) {
        ans.unshift(nums[maxLenEnd])
        maxLenEnd = predecessor[maxLenEnd]
    }
    ans.unshift(nums[maxLenEnd])
    
    return ans
};

let nums = [1,2,4,8,16]
console.log(largestDivisibleSubset2(nums))
