var findNumberOfLIS = function(nums) {
    let times = []
    let dist = []
    let max = 0
    for (let i=0; i<nums.length; i++) {
        dist[i] = 1
        times[i] = 1
        for (let j=i-1; j>=0; j--) {
            if (nums[j]<nums[i]) {
                if (dist[j]+1>dist[i]) {
                    dist[i] = dist[j]+1
                    times[i] = times[j]
                } else if (dist[j]+1 === dist[i]) {
                    times[i] += times[j]
                }
            }
        }
        max = Math.max(max,dist[i])
    }

    let ans = 0
    for (let i=0; i<dist.length; i++) {
        if (dist[i] === max) {
            ans += times[i]
        }
    }
    return ans
};

let nums = [2,2,2,2,2]
console.log(findNumberOfLIS(nums))


//c++
class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        vector<int> dp(nums.size(),1);
        vector<int> count(nums.size(),1);
        int ans = 0, maxLen = 1;
        for (int i=1; i<nums.size(); i++) {
            for (int j=i-1; j>=0; j--) {
                if (nums[j]<nums[i]) {
                    if (dp[i] < dp[j]+1) {
                        dp[i] = dp[j]+1;
                        count[i] = count[j];
                    } else if (dp[i] == dp[j]+1) {
                        count[i] += count[j];
                    }
                }
            }
            maxLen = max(maxLen,dp[i]);
        }
        
        for (int i=0; i<count.size(); i++) {
            if (dp[i] == maxLen) ans += count[i];
        }
        return ans;
    }
};
