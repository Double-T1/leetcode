var calculateMinimumHP = function(dungeon) {
    return helper(dungeon)
};

let helper = (dungeon,i=0,j=0,memo={}) => {
    if (i in memo && j in memo[i]) return memo[i][j]
    if (!memo[i]) memo[i] = {}

    if (i===dungeon.length-1 && j===dungeon[i].length-1) {
        memo[i][j] = evaluate(dungeon[i][j],1)
    } else {
        let a = i<dungeon.length-1? evaluate(dungeon[i][j],helper(dungeon,i+1,j,memo)) : Number.MAX_SAFE_INTEGER
        let b = j<dungeon[i].length-1? evaluate(dungeon[i][j],helper(dungeon,i,j+1,memo)) : Number.MAX_SAFE_INTEGER
        memo[i][j] = Math.min(a,b)
    }
    return memo[i][j]
}

let evaluate = (val,next) => {
    let num = next-val
    if (num <= 0) {
        return 1
    } else {
        return num
    } 
}

var calculateMinimumHP2 = function(dungeon) {
    let dp = new Array(dungeon[0].length)

    for (let i=dungeon.length-1; i>=0; i--) {
        for (let j=dungeon[i].length-1; j>=0; j--) {
            if (i===dungeon.length-1 && j===dungeon[i].length-1) {
                dp[j] = evaluate2(dungeon[i][j],1)
            } else {
                let a = i<dungeon.length-1? evaluate2(dungeon[i][j],dp[j]) : Number.MAX_SAFE_INTEGER
                let b = j<dungeon[i].length-1? evaluate2(dungeon[i][j],dp[j+1]) : Number.MAX_SAFE_INTEGER
                dp[j] = Math.min(a,b)
            }
        }
    }
    return dp[0]
};

let evaluate2 = (val,next) => {
    let num = next-val
    if (num <= 0) {
        return 1
    } else {
        return num
    } 
}
let dungeon = [[1,-3,3],[0,-2,0],[-3,-3,-3]]
console.log(calculateMinimumHP2(dungeon))
