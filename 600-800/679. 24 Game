class Solution {
private:
    double e = std::numeric_limits<double>::epsilon();
    
public:
    bool judgePoint24(vector<int>& cards) {
        vector<double> perm;    
        return helper(cards,perm,0);
    }
    
private:
    bool helper(vector<int>& cards, vector<double>& perm, int bit) {
        if (perm.size() == 4) return cal4(perm);
        
        for (int i=0; i<4; i++) {
            int mask = 1<<i;
            if (bit&mask) continue;
            perm.push_back((double)cards[i]);
            if(helper(cards,perm,bit|mask)) return true;;
            perm.pop_back();
        }
        return false;
    }
    
    bool cal4(vector<double>& perm) {
        for (int k =0; k<4; k++) {
            if(cal3(choose(k,perm[0],perm[1]),perm[2],perm[3])) return true;
            if(cal3(perm[0],choose(k,perm[1],perm[2]),perm[3])) return true;
            if(cal3(perm[0],perm[1],choose(k,perm[2],perm[3]))) return true;
        }
        return false;
    }
    
    bool cal3(double a, double b, double c) {
        for (int k=0; k<4; k++) {
            if (cal2(choose(k,a,b),c)) return true;
            if (cal2(a,choose(k,b,c))) return true;
        }
        return false;
    }
    
    bool cal2(double a, double b) {
        double p = (double)3-(double)8/(double)3;
        
        for (int k=0; k<4; k++) {
            double x = choose(k,a,b);
            if (fabs(x-24.0)<=0.001) {
                return true;
            }
        }
        return false;
    }
    
    double choose(int k, double a, double b) {
        switch(k) {
            case 0:
                return a+b;
            case 1:
                return a-b;
            case 2:
                return a*b;
            default:
                return a/b;
        }
    }
};
