//coloring
var isBipartite = function(graph) {
    let color = []
    for (let i=0; i<graph.length; i++) {
        if (color[i] !== undefined) continue
        let queue = [i]
        color[i] = -1
        while (queue.length) {
            let vertex = queue.pop()
            for (let end of graph[vertex]) {
                if (color[end] === undefined) {
                    color[end] = -color[vertex]
                    queue.unshift(end)
                } else if (color[end] === color[vertex]) {
                    return false
                }
            }
        }
    }
    return true
};

//traversing
var isBipartite = function(graph) {
    let color = []
    for (let i=0; i<graph.length; i++) {
        if (!color[i] && !dfs(i,graph,color,1)) return false
    }
    return true
};

let dfs = (i,graph,color,col) => {
    if (color[i] !== undefined) return color[i] === col 

    color[i] = col
    for (let end of graph[i]) {
        if (!dfs(end,graph,color,-col)) return false
    }
    return true
}


//BFS with c++
class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {   
        vector<int> inGroup(graph.size(),-1);
        queue<int> qu;        
        for (int i=0; i<graph.size(); i++) {
            if (inGroup[i]>-1) continue;
            qu.push(i);
            inGroup[i] = 0;
            while (!qu.empty()) {
                auto u = qu.front(); qu.pop();
                int curGroup = inGroup[u];
                for(auto v: graph[u]) {
                    if (inGroup[v]>-1) {
                        if (inGroup[v] == curGroup) return false;
                    } else {
                        inGroup[v] = curGroup^1;
                        qu.push(v);
                    }
                }
            }       
        }
        return true;
    }
};
