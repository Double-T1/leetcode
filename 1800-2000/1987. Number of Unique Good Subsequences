//brute force
//heap out of memory
//time: O(n**2)
//space: O(2**n)
var numberOfUniqueGoodSubsequences = function(binary) {
    let set = new Set()
    let ans = []
    let mod = 10**9+7
    for (let i=0; i<binary.length; i++) {
        let val = parseInt(binary[i],10)
        let size = ans.length
        for (let j=0; j<size; j++) {
            let num = (ans[j] << 1)| val
            if (!set.has(num)) {
                set.add(num)
                ans.push(num)
            }
        }
        if (!set.has(val)) {
            set.add(val)
            ans.push(val)
        }
        
    }
    return ans.length%mod
};

//time: O(n)
var numberOfUniqueGoodSubsequences2 = function(binary) {
    let total = 0
    let mod = (10**9)+7
    let map = new Map()
    for (let i=0; i<binary.length; i++) {
        let current = 0
        if (map.has('0')) current--
        current += (total+1-cull(map,binary[i]))%mod
        total += current
        map.set(binary[i],(map.get(binary[i])+current))
    }
    return total%mod
};

let cull = (map,num) => {
    if (map.has(num)) {
        return map.get(num)
    } else {
        map.set(num,0)
        return 0
    }
}
let binary
console.log(numberOfUniqueGoodSubsequences2(binary))
