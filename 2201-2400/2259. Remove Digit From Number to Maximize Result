//brute force
//works but terrible
//time: O(n^2)
class Solution {
public:
    string removeDigit(string number, char digit) {
        string temp, ans="";
        int n = number.size();
        for (int i=0; i<number.size(); i++) {
            if (number[i] == digit) {
                temp = number.substr(0,i) + number.substr(i+1,n-i-1);
                if (ans == "" || isSmaller(ans,temp)) {
                    ans = temp;
                }
            }
        }
        return ans;
    }
    
private:
    bool isSmaller(string& s1, string& s2) {
        for (int i=0,j=0; i<s1.size(); i++,j++) {
            if (s1[i]<s2[j]) return true;
            else if (s1[i]>s2[j]) return false;
        }
        return false;
    }
};

//solution 2
//much better
//time: O(n)
class Solution {
public:
    string removeDigit(string number, char digit) {
        int n =number.size();
        int last = 0;
        for (int i=0; i<n; i++) {
            if (number[i] == digit) {
                if (i == n - 1) return number.substr(0,n-1);
                if (number[i] < number[i+1]) return number.substr(0,i) + number.substr(i+1,n-i-1);
                if (number[i] > number[i+1]) last = i;
            }
        }
        return number.substr(0,last) + number.substr(last+1,n-last-1);
    }
};

/*
if there is only one matched digit => that is the one
else (i matched)
check if the i+1 is > i ? if yes than this is the one
if i+1 == i => count the next one, since the result is the same
if i+1 < i => def not


e.g. 7274717 target is 7
274717
724717
727417
727471
=> if all smaller, pick the last one 

how about
7737
737
737
773

7372
372
732


*/
