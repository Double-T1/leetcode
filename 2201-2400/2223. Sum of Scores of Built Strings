//z algo
//time: O(n)
class Solution {
public:
    long long sumScores(string s) {
        int n = s.size();
        vector<int> z(n,0);
        z[0] = n;
        int left=0, right=0, k;
        
        for (int i=1; i<s.size(); i++) {
            if (right<i) {
                left = right = i;
                
                while (right<n && s[right] == s[right-left]) right++;
                z[i] = right-left;
                right--;
            } else {
                k = i-left;
                if (z[k]<right-i+1) z[i] = z[k];
                else {
                    left = i;
                    
                    while(right<n && s[right] == s[right-left]) right++;
                    z[i] = right-left;
                    right--;
                }
            }
        }
        
        long long sum = 0;
        for (auto num: z) sum += (long long)num;
        return sum;
    }    
};

//kmp with a twist at the end
//same comp
class Solution {
public:
    long long sumScores(string s) {
        vector<int> lps(s.size(),0);
        for (int i=0, j=1; j<s.size();) {
            if (s[i] == s[j]) lps[j++] = ++i;
            else if (i>0) i = lps[i-1];
            else j++;
        }
        
        vector<int> cnt(s.size(),0);
        for (int k=0; k<s.size(); k++) cnt[k] = lps[k] ? cnt[lps[k]-1]+1: 0;
        return accumulate(begin(cnt), end(cnt), 0LL) + s.size();
    }
};
