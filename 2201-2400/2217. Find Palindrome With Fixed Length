var kthPalindrome = function(queries, intLength) {
    let base = 10**(Math.floor((intLength-1)/2)), ans = [], odd = intLength%2 === 1, max = Math.floor((intLength-1)/2)+1
    for (let k of queries) {
        ans.push(helper(k,base,odd,max))
    }
    return ans
};

let helper = (k,base,odd,max) => {
    let str = ((k-1)+base).toString(10), otherHalf = ''
    if (str.length > max) return -1 
    let i = odd? str.length-2 : str.length-1
    while (i>=0) {
        otherHalf = otherHalf + str[i]
        i--
    }
    return parseInt(str+otherHalf)
}

/**
constraint: we can't simulate all the possible palin => q up to 10^9
need a function to quickly produce the kth palin depending on length
O(q.length)

observations:
1. go from outside to indside s[i] === s[j], from 0-9, (1-9 if i is the leading digit, excluding length=1)
2. 

for length 5
10001
10101
11011 => 10001 and the inside from 000 to 999 => 000 and the inside from 0-9
essentially: 100 with 00-99 => 00 with 0-9=> there are 100 possibilities
to find the kth among: example: 1=> 00, 2=> 01, 26 => 25, k=> k-1 
100 => 99 => 19991
101 => 100 => 20002
200 => 199 => 29992

for 5: 2, 6: 2, 4: 1, 3:1
let base = 10**Math.floor((len-1)/2)
k-1 + base

*/
