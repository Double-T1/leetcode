var GetImportance = function(employees, id) {
    //1.find the id first 
    //2add up all the importance underneath it

    let map = {}
    for (let i=0; i<employees.length; i++) {
        let id = employees[i].id
        map[id] = employees[i]
    }

    let queue = [id]
    let ans = 0
    while (queue.length) {
        id = queue.pop()
        ans += map[id].importance
        for (let sub of map[id].subordinates) {
            queue.unshift(sub)
        }
    }
    return ans
};

//c++
class Solution {
public:
    int getImportance(vector<Employee*> employees, int id) {
        unordered_map<int,int> hashmap;
        for (int i=0; i<employees.size(); i++) {
            hashmap[employees[i]->id] = i;
        }
        
        return helper(employees,id,hashmap);
    }
    
private:
    int helper(vector<Employee*>& e, int id, unordered_map<int,int>& hashmap) {
        int i = hashmap[id], ans = 0;
        for (auto sub: e[i]->subordinates) {
            ans += helper(e,sub,hashmap);
        }
        return ans + e[i]->importance;
    }
};
