var minJumps = function(arr) {
    if (arr.length===1) return 0
    let map = new Map()
    for (let i=0; i<arr.length; i++) {
        let val = arr[i]
        if (map.has(val)) {
            map.get(val).push(i)
        } else {
            map.set(val,[i])
        }
    }

    //bfs
    let queue = [0]
    let visited = {}
    visited[0] = true
    let steps= 0
    let target = arr.length-1 
    while (queue.length) {
        steps++
        let size = queue.length
        while (size) {
            let i = queue.pop()
            while (map.get(arr[i]).length) {
                if (helper(queue,visited,target,map.get(arr[i]).pop())) return steps
            }

            if (i>0) if(helper(queue,visited,target,i-1)) return steps
            if(helper(queue,visited,target,i+1)) return steps
            size--
        }
    }
    return Infinity
};

let helper = (queue,visited,target,index) => {
    if (visited[index]) return false
    if (target === index) return true
    visited[index] = true
    queue.unshift(index)
    return false
}

let arr = [7,6,9,6,9,6,9,7]
console.log(minJumps(arr))
