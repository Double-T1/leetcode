class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        int parent[n], count[n];
        for (int i=0; i<n; i++) 
            parent[i] = i, count[i] = 1;
        
        for (int i=0; i<n; i++) {
            for (int j=i+1; j<n; j++) {
                if (graph[i][j]) 
                    unite(parent,i,j,count);
            }
        }
        
        int k = initial.size();
        vector<pair<int,int>> v; //{delta,smallest node}
        unordered_map<int,int> c2i; //[component/parent: index in vector]
        for (int i=0; i<k; i++) {
            int c = find(parent,initial[i]);
            if (c2i.find(c) != c2i.end()) {
                v[c2i[c]].first = 0;
                v[c2i[c]].second = min(v[c2i[c]].second,initial[i]);
            } else {
                c2i[c] = v.size();
                v.emplace_back(count[c],initial[i]);
            }
        }
        
        int ans = n, maxDelta = 0;
        for (auto&[delta, node]: v) {
            if (delta>maxDelta) {
                maxDelta = delta;
                ans = node;
            } else if (delta == maxDelta) {
                ans = min(ans,node);
            }
        }
        return ans;
    }
    
private:
    void unite(int parent[], int i, int j, int count[]) {
        int pi = find(parent,i), pj = find(parent,j);
        if (pi == pj) return;
        parent[pj] = pi;
        count[pi] += count[pj];
    }
    
    int find(int parent[], int x) {
        if (x != parent[x]) 
            parent[x] = find(parent,parent[x]);
        return parent[x];
    }
};

/*
all the nodes in the same component will be infected

M is the total infected nodes
m is the amount of nodes infected if x is removed from initial
d = M-m

if a component has multiple initials, d is all 0 => return the one with smallest index

union find all nodes, pick the one with the smallest index as parent




*/
