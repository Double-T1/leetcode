//DP
//time: O(2*target) => O(target) => TLE
var brokenCalc = function(startValue, target) {
    return helper(startValue,target)
};

let helper = (sv,target,memo=new Map()) => {
    if (sv >= target) return sv-target
    if (sv === 0) return Number.MAX_SAFE_INTEGER
    
    if (memo.has(sv)) return memo.get(sv)
    memo.set(sv,Number.MAX_SAFE_INTEGER)
    memo.set(sv,Math.min(helper(2*sv,target,memo),helper(sv-1,target,memo))+1)
    return memo.get(sv)
}

//time: O(log(t/sv))
var brokenCalc = function(startValue, target) {
    let sv = startValue, ans = 0
    while(sv < target) {
        sv *= 2
        ans++
    }
    let diff = sv-target
    while (diff && sv>startValue) {
        if (diff%2 === 1) ans++, diff--
        sv >>= 1
        diff >>= 1
    }
    return ans+diff
};

//time: O(log(t/sv))
//similar idea as above but going forward
var brokenCalc = function(startValue, target) {
    let ans = 0
    while (target>startValue) {
        ans++
        if (target%2 === 1) {
            target++
        } else {
            target /= 2
        }
    }
    return ans + startValue - target
};
