//brute force
//ASAP:
//1. build a adjMatrix, O(n**2)
//2. asap, O(n**3)
//3. sum of the dist for each node O(n*2)
//total: O(n*3)
//heap out of memory => space: O(n**2)
var sumOfDistancesInTree = function(n, edges) {
    let adj = new Array(n)
        .fill()
        .map(() => new Array(n).fill(Number.MAX_SAFE_INTEGER))
    for (let i=0; i<edges.length; i++) {
        let [v1,v2] = edges[i]
        adj[v1][v2] = 1
        adj[v2][v1] = 1 
    }

    for (let k=0; k<n; k++) {
        for (let i=0; i<n; i++) {
            for (let j=0; j<n; j++) {
                if (i === j) adj[i][j] = 0
                adj[i][j] = Math.min(adj[i][j],adj[i][k] + adj[k][j])
            }
        }
    }
    
    return adj.map(arr => {
        return arr.reduce((accu,ele) => accu+ele)
    })
};

//time: O(n**2)
//space: O(n)
//SPSP
//TLE
var sumOfDistancesInTree2 = function(n, edges) {
    let adj = []
    for (let i=0; i<edges.length; i++) {
        let [v1,v2] = edges[i]
        if (!adj[v1]) adj[v1] = []
        if (!adj[v2]) adj[v2] = []
        adj[v1].push(v2)
        adj[v2].push(v1)
    }

    let dist = []
    for (let i=0; i<n; i++) {
        helper(dist,adj,i)
    }
    return dist    
};

let helper = (dist,adj,vertex) => {
    let queue = [vertex]
    let level = 0
    let visited = []
    visited[vertex] = true
    dist[vertex] = 0
    while (queue.length) {
        let size = queue.length
        dist[vertex] += size*level
        while (size) {
            let vertex = queue.pop()
            size--
            if (adj[vertex] === undefined) continue
            for (let end of adj[vertex]) {
                if (visited[end]) continue
                visited[end] = true
                queue.unshift(end)
            } 
        }
        level++
    }
    return
}

//optimized
//time: O(n)
//1. construc adj, O(n)
//2. find the shortest path for one node,bfs,dfs O(n)
//3. sum up the dist for this node i, O(n)
//4. travese to node j, which has the dist[j] = dist[i]- 1 - (number of children for j) + (all non children node for j) 
var sumOfDistancesInTree3 = function(n, edges) {
    let adj = []
    for (let i=0; i<edges.length; i++) {
        let [v1,v2] = edges[i]
        if (!adj[v1]) adj[v1] = []
        if (!adj[v2]) adj[v2] = []
        adj[v1].push(v2)
        adj[v2].push(v1)
    }
    let childrenNum = []
    let dist = [recur(adj,childrenNum)]
    helper3(dist,adj,childrenNum,n)

    return dist    
};

let recur = (adj,childrenNum,node=0,visited=[true]) => {
    let accu = 0
    childrenNum[node] = 0
    if (adj[node] !== undefined) {
        for (let end of adj[node]) {
            if (visited[end]) continue
            visited[end] = true
            accu += recur(adj,childrenNum,end,visited)+1+childrenNum[end]
            childrenNum[node] += childrenNum[end]+1
        }
    }
    return accu
}

let helper3 = (dist,adj,childrenNum,n,node=0,visited=[true]) => {
    if (adj[node] !== undefined) {
        for (let end of adj[node]) {
            if (visited[end]) continue
            visited[end] = true
            dist[end] = dist[node] - (childrenNum[end]+1) + (n-childrenNum[end]-1)
            helper3(dist,adj,childrenNum,n,end,visited)         
        }
    }
    return
}


let  n = 6, edges =[[0,1],[0,2],[2,3],[2,4],[2,5]]
console.log(sumOfDistancesInTree3(n,edges))
