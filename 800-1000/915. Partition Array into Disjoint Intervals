//brute force 
//O(n**2)

//O(n)
var partitionDisjoint = function(nums) {
    let max = [nums[0]]
    for (let i=1; i<nums.length; i++) {
        max[i] = Math.max(nums[i],max[i-1])
    }

    let min = new Array(nums.length)
    min[min.length-1] = nums[nums.length-1]
    for (let i=nums.length-2; i>=0; i--) {
        min[i] = Math.min(nums[i],min[i+1])
    }

    //find the last of the left subarray
    for (let i=0; i<max.length-1; i++) {
        if (max[i]<=min[i+1]) {
            return i+1
        }
    }
};

//space optimized => one array only
var partitionDisjoint2 = function(nums) {
    let min = new Array(nums.length)
    min[min.length-1] = nums[nums.length-1]
    for (let i=nums.length-2; i>=0; i--) {
        min[i] = Math.min(nums[i],min[i+1])
    }

    //find the last of the left subarray
    let max = nums[0]
    for (let i=0; i<min.length-1; i++) {
        if (max<=min[i+1]) {
            return i+1
        } else {
            //prepare max for the i+1
            max = Math.max(max,nums[i+1])
        }
    }
};

//space optimized => no array
//maximum of the left subarray has to be smaller than the minimum of the right subarray
//a DP approach
var partitionDisjoint3 = function(nums) {
    //find the last of the left subarray
    let maxOfLeft = nums[0]
    let totalMax = nums[0]
    let ans = 1
    for (let i=1; i<nums.length; i++) {
        totalMax = Math.max(totalMax,nums[i])
        if (maxOfLeft>nums[i]) {
            ans = i+1
            maxOfLeft = totalMax 
        }
    }
    return ans
};
let nums = [1,1,1,0,6,12]
console.log(partitionDisjoint3(nums))
