var isCompleteTree = function(root) {
    let queue = [root] 
    let prevIsNull = false
    while (queue.length) {
        let size = queue.length
        while (size) {
            let node = queue.pop()
            if (prevIsNull) {
                if (node) return false
            } else {
                if (!node) {
                    prevIsNull = true
                } else {
                    queue.unshift(node.left)
                    queue.unshift(node.right)
                }
            }
            size--
        }
    }
    return true
};

//C++
class Solution {
public:
    bool isCompleteTree(TreeNode* root) {
        queue<TreeNode*> qu;
        qu.push(root);
        bool shouldBeNull = false;
        while(!qu.empty()) {
            auto node = qu.front(); qu.pop();
            if (shouldBeNull && node) return false; 
            if (!node) {
                shouldBeNull = true;
                continue;
            }
            qu.push(node->left);
            qu.push(node->right);
        }
        return true;
    }
};
