//fastest way possible without revalidate a palindrome
var partition = function(s) {
    let arr = []
    backtrack2(arr,s)
    return arr
};

//the topological order of palindrome checking and traversing the string are at odds
let backtrack2 = (supArr,s,i=0,subArr=[],valid=[]) => {
    if (i === s.length) {
        supArr.push([...subArr])
        return
    } else {
        //for each i, we look forward j indices
        for (let j=i; j<s.length; j++) {
            if (s[i] === s[j] && (i+1>j-1 || valid[i+1][j-1])) {
                if (valid[i] === undefined) valid[i] = []
                valid[i][j] = true
                subArr.push(s.slice(i,j+1))
                backtrack2(supArr,s,j+1,subArr,valid)
                subArr.pop()
            }
        }
        return
    }
}

var partition = function(s) {
    let ans = []
    backtracking(ans,s)
    return ans
};

let backtracking = (supArr,s,index=0,leftBound=0,count=0,subArr=[]) => {
    if (index === s.length) {
        if (count === s.length) supArr.push([...subArr])
        return 
    } else {
        //1.current as center
        //2.current and current+1 as center
        //3.skip current

        //1. && 2. 
        let oneTwo = [[index,index],[index,index+1]]
        for (let [left,right] of oneTwo) {
            while (s[left] === s[right] && left>=leftBound && right<s.length) {
                subArr.push(s.slice(left,right+1))
                backtracking(supArr,s,right+1,right+1,count+right-left+1,subArr)
                subArr.pop()
                left--
                right++
            }
    
        }

        //3. 
        backtracking(supArr,s,index+1,leftBound,count,subArr)
        return
    }
}

//optimized
//time: O(N*(2**N))
//space: O(N**2)
var partition2 = function(s) {
    let ans = []
    backtracking2(ans,s)
    return ans
};

//the left doesn't touch the left boundary, then there is no point to proceed 
let backtracking2 = (supArr,s,index=0,leftBound=0,count=0,subArr=[]) => {
    if (index === s.length) {
        if (count === s.length) supArr.push([...subArr])
        return 
    } else {
        //1.current as center
        //2.current and current+1 as center
        //3.skip current

        //1. && 2. 
        let oneTwo = [[index,index],[index,index+1]]
        for (let [left,right] of oneTwo) {
            while (s[left] === s[right] && left>=leftBound && right<s.length) {
                left--
                right++
            }
            if (left<leftBound) {
                subArr.push(s.slice(leftBound,right))
                backtracking2(supArr,s,right,right,count+right-left-1,subArr)
                subArr.pop()
            }
        }

        //3. 
        backtracking(supArr,s,index+1,leftBound,count,subArr)
        return
    }
}

let s = "cbabcdd"
console.log(partition2(s))

//an amazing time complexity analysis on leetcode
A string of length N will have (N, N-1, N-2, ...,1) substrings at positions (0, 1, 2, ..., N-1) respectively. So the total number of substrings of a string is N+N-1+...+1 = O(N2). It is not exponential.

The number 2N in complexity analysis above is in fact the number of nodes in the search tree - not the number of substrings. It is the number of possible partitionings (each partitioning is a way to partition the string into substrings).
This can be derived as follows - Imagine the string as a sequence of N chars separated by a pipe between neighbors, such as a string "abcde" = a|b|c|d|e. Such a representation will have N-1 pipes - in this example, 4 pipes.
If you want the partitioning to have 4 substrings, then you can ask, "how many ways can I select 3 pipes out of the 4 pipes?" - answer is 4 choose 3, i.e. 4C3 = 4. The 4 ways to partition are: { {"a", "b", "c", "de"}, {"a", "b", "cd", "e"}, {"a", "bc", "d", "e"}, {"ab", "c", "d", "e"}
Arguing like the above, the total number of ways to partition this example is when we ask all questions "how many ways can I select 0 or 1 or 2 or 3 or 4 pipes?" = 4C0 + 4C1 + 4C2 + 4C3 + 4C4 = 24 = 16 partitionings
In general a string of length N will have N-1C0 + N-1C1 + ... +N-1CN-2 = 2N-1 = 2N-1 = O(2N) partitionings

For each partitioning, we do two things:
build the substrings for that partition
check whether each substring in that partitioning is a palindrome or not
Since the number of characters in each parititioning is N, cost of the above operations is N+N = 2.N = O(N)
Later, in Approach 2, when we improve the logic using dynamic programming, it does not change the overall complexity, since we would still need to build the substrings!

Combining 2&3 above, we get O(N.2N)
DFS in the above implementation works by first finding all partitionings where the first substring chosen has 1 character i.e. ends at start. Then the first substring chosen has 2 characters, ... Overall, the endth iteration of the loop has all characters up to end in the first substring
Along the way if a substring is found that is not a palindrome, search tree gets pruned, i.e., we don't go deeper and further partitioning effort stops (i.e. all partitionings that would have included that non-palindrome will not get completed.)

