//partition it twice
//time: O(n)
var sortColors = function(nums) {
    partition(nums,2,partition(nums,1,0,nums.length-1),nums.length-1)
    return nums
};

//everything smaller than pivot to the left
//hoare's
let partition = (nums,pivot,left,right) => {
    while (left<=right) {
        while (left<=right && nums[left]<pivot) {
            left++
        }

        while (left<=right && nums[right]>=pivot) {
            right--
        }
        if (left>right) break
        swap(nums,left,right)
    }
    return left //left is the start of nums not smaller then pivot
}

let swap = (arr,a,b) => {
    let temp = arr[a]
    arr[a] = arr[b]
    arr[b] = temp
    return
}

//count sort
//time: O(n)
var sortColors = function(nums) {
    let arr = new Array(3).fill(0)
    for (let i=0; i<nums.length; i++) {
        if (nums[i] === 0) {
            arr[0]++
        } else if (nums[i] === 1) {
            arr[1]++
        } else {
            arr[2]++
        }
    }
    
    for(let i=0; i<nums.length; i++) {
        if (arr[0]>0) {
            nums[i] = 0
            arr[0]--
        } else if (arr[1]>0) {
            nums[i] = 1
            arr[1]--
        } else {
            nums[i] = 2
            arr[2]--
        }
    }
};
