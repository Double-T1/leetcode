var maxTaxiEarnings = function(n, rides) {
    //going from 1 to n
    rides.sort((a,b) => a[1]-b[1])
    let max = 0
    let map = new Map()
    map.set(0,0)

    for (let [start,end,tips] of rides) {
        if (end>n) break
        let profit = end-start+tips
        let prevIndex = binarySearch(rides,start)
        let prevEnd = prevIndex === -1? 0 : rides[prevIndex][1]
        max = Math.max(max,profit+map.get(prevEnd))

        if (!map.has(end) || map.get(end)<max) {
            map.set(end,max)
        }
    }
    return max
}; 

let binarySearch = (rides,start) => {
    let left = -1
    let right = rides.length-1
    while (left<right) {
        let mid = left + Math.ceil((right-left)/2)
        if (rides[mid][1]<=start) {
            left = mid
        } else {
            right = mid-1
        }
    }
    return right
}

let n =20, rides = [[1,6,1],[3,10,2],[10,12,3],[11,12,2],[12,15,2],[13,18,1]]
console.log(maxTaxiEarnings(n,rides))
