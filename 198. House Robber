//time: O(n)
var rob = function(nums) {
    if(nums.length === 0) return 0
    if(nums.length === 1) return nums[0]
    if(nums.length === 2) return Math.max(nums[0],nums[1])

    let twoStepsBeforeMax = nums[0]
    let oneStepBeforeMax = Math.max(nums[0],nums[1]) 
    let temp = 0;

    for (let i=2; i<nums.length; i++) {
        temp = Math.max(twoStepsBeforeMax + nums[i], oneStepBeforeMax)
        twoStepsBeforeMax = oneStepBeforeMax
        oneStepBeforeMax = temp
    }

    return temp
}

//time: O(n)
class Solution {
public:
    int rob(vector<int>& nums) {
        vector<int> memo(nums.size(),-1);
        return helper(nums,memo);
    }

private:
    int helper(vector<int>& nums, vector<int>& memo, int i=0) {
        if (i>=nums.size()) return 0;
        if (memo[i]>-1) return memo[i];
        return memo[i] = max(helper(nums,memo,i+2) + nums[i],helper(nums,memo,i+1));
    }
};
