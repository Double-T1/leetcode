//O(n)
var countBits = function(n) {
    let ans = [0], power = 1, accu = 1
    for (let i=1; i<=n; i++) {
        if (i>accu) power *= 2, accu += power
        ans[i] = ans[i-power]+1
    }
    return ans
};

//O(n)
//with bit manipulation, much more clever
var countBits = function(n) {
    let ans = [0]
    for (let i=1; i<=n; i++) {
        if ((i & 1) === 0) {
            ans[i] = ans[i>>1]
        } else {
            ans[i] = ans[i-1]+1
        }
    }
    return ans
};

//C++
class Solution {
public:
    vector<int> countBits(int n) {
        vector<int> ans{0};
        int limit = 1, dup = 1;
        for (int i=1, p=0; i<=n; i++) {
            ans.push_back(ans[p]+1);
            p++;
            dup--;
            if (dup==0) {
                p=0;
                limit *= 2;
                dup = limit;
            }
        }
        return ans;
    }
};

/**
one pass with O(n) time
0:0

1:1

2:1
3:2

4:1
5:2
6:2
7:3

8:1
9:2
10:2
11:3
12:2
13:3
14:3
15:4

16:1


*/
