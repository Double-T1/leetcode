//c++
struct TrieNode {
    char val;
    bool isEnd=false;
    vector<TrieNode*> children;
    
    TrieNode(char c): val(c), children(26) {}
};


class Trie {
private:
    TrieNode* root;
    
public:
    Trie() {
        root = new TrieNode('\0');
    }
    
    void insert(string word) {
        auto node = root;
        for (char c: word) {
            if ((node->children)[c-'a']) {
                node = (node->children)[c-'a'];
            } else {
                TrieNode* cur = new TrieNode(c);
                node->children[c-'a'] = cur;
                node = cur;
            }
        }
        node->isEnd = true;
    }
    
    bool search(string word) {
        auto node = root;
        for (char c: word) {
            if ((node->children)[c-'a']) {
                node = (node->children)[c-'a'];
            } else {
                return false;
            }
        }
        return node->isEnd;
    }
    
    bool startsWith(string prefix) {
        auto node = root;
        for (char c: prefix) {
            if ((node->children)[c-'a']) {
                node = (node->children)[c-'a'];
            } else {
                return false;
            }
        }
        return true;
    }
};




//JS
class TrieNode {
    constructor(val='',end=false) {
        this.val= val
        this.children= new Array(26)
        this.end = end
    }
}

var Trie = function() {
    this.root = new TrieNode()
};

/** 
 * @param {string} word
 * @return {void}
 */
Trie.prototype.insert = function(word) {
    let node = this.root
    for (let i =0; i<word.length; i++) {
        let char = word[i]
        let code = char.charCodeAt(0) - 'a'.charCodeAt(0)
        if (node.children[code] === undefined) {
            node.children[code] = new TrieNode(char)
        }
        node = node.children[code]
    }
    node.end = true
    return 
};

/** 
 * @param {string} word
 * @return {boolean}
 */
Trie.prototype.search = function(word) {
    let node = this.root
    for (let i =0; i<word.length; i++) {
        let code = word[i].charCodeAt(0) - 'a'.charCodeAt(0)
        if (node.children[code] === undefined) {
            return false
        } else {
            node = node.children[code]
        }
    }
    return node.end === true 
};

/** 
 * @param {string} prefix
 * @return {boolean}
 */
Trie.prototype.startsWith = function(prefix) {
    let node = this.root
    for (let i =0; i<prefix.length; i++) {
        let code = prefix[i].charCodeAt(0) - 'a'.charCodeAt(0)
        if (node.children[code] === undefined) {
            return false
        } else {
            node = node.children[code]
        }
    }
    return true
};
