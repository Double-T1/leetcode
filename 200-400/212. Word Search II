struct TrieNode {
    vector<TrieNode*> children;
    bool isEnd;
    vector<string> word;
    
    TrieNode(): children(26,nullptr),isEnd(false) {};
};

class Trie {
private:
    TrieNode* root;
public:
    Trie() {
        root = new TrieNode();
    }
    
    TrieNode* getRoot() {
        return root;
    }
    
    void insert(string& word) {
        auto node = root;
        for (char& c: word) {
            if (!(node->children)[c-'a']) {
                (node->children)[c-'a'] = new TrieNode();
            }
            node = node->children[c-'a'];
        }
        node->isEnd = true;
        (node->word).push_back(word);
    }
};

class Solution {
public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        Trie* trie = new Trie();
        for (auto& word : words) trie->insert(word);
        auto root = trie->getRoot();
        
        vector<string> ans;
        for (int i=0; i<board.size(); i++) {
            for(int j=0; j<board[0].size(); j++) {
                backtrack(ans,board,i,j,root);
            }
        }  
        delete trie;
        return ans;
    }
    
private:
    void backtrack(vector<string>& ans, vector<vector<char>>& board, int i, int j, TrieNode* node) {
        if (i<0 || i>= board.size() || j<0 || j>=board[0].size() || board[i][j] == '*') return;
        
        char c = board[i][j];
        if ((node->children)[c-'a']) {
            auto next = node->children[c-'a'];
            board[i][j] = '*';
            backtrack(ans,board,i+1,j,next);
            backtrack(ans,board,i-1,j,next);
            backtrack(ans,board,i,j+1,next);
            backtrack(ans,board,i,j-1,next);
            board[i][j] = c;
            
            if (next->isEnd) {
                for (auto& word : next->word) {
                    ans.push_back(word);
                }
                (next->word).clear();
                next->isEnd = false;
            }
        }
        return;
    }
};
