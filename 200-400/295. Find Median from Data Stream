class MedianFinder {
private:
    //for minHeap
    struct comp{
        bool operator() (int p, int q) {
            return p>q;
        }
    };
public:
    priority_queue<int, vector<int>, comp> pq1;
    priority_queue<int> pq2;
    
    MedianFinder() {
    }
    
    void addNum(int num) {
        if (!pq2.empty() && num > pq2.top()) pq1.push(num);
        else pq2.push(num);
        
        if (pq1.size()>pq2.size()) {
            pq2.push(pq1.top());
            pq1.pop();
        } else if (pq1.size()<pq2.size()-1) {
            pq1.push(pq2.top());
            pq2.pop();
        }
    }
    
    double findMedian() {
        double med = (double) pq2.top();
        if ((pq2.size()+pq1.size())%2 == 0) med = (med+(double)pq1.top())/2;
        return med;
    }
};
