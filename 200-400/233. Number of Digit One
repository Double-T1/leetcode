//digit DP
//form 0 to n, count the occurrence of digit 1

//brute force first
//time: O((logn)^2)
var countDigitOne = function(n) {
    return helper(n.toString())
};

let helper = (num,pos=0,isSmaller=false,memo=[]) => {
    if (pos===num.length) return 0
    if (pos in memo && isSmaller in memp[pos]) return memo[pos][isSmaller]
    if (memo[pos] === undefined) memo[pos] = {}

    if (isSmaller) {
        memo[pos][isSmaller] = helper(num,pos+1,isSmaller,memo)*10 + (10**(num.length-pos-1))
    } else {
        let current = parseInt(num[pos])
        //go smaller or stay equal
        let smaller = helper(num,pos+1,true,memo)*(current)
        if (current>=2) smaller += 10**(num.length-pos-1)//gaurantee to cover a 1 

        let equal = helper(num,pos+1,false,memo)
        if (current===1) equal += pos<num.length-1? parseInt(num.slice(pos+1)) + 1 : 1 //this part sucks
        memo[pos][isSmaller] = smaller + equal
    }
    return memo[pos][isSmaller]
}

//time: O(logn)
var countDigitOne2 = function(n) {
    return helper2(n)
};

let helper2 = (n,num=n.toString(),pos=0,isSmaller=false,base=10**(num.length-1),memo=[]) => {
    if (pos===num.length) return 0
    if (pos in memo && isSmaller in memo[pos]) return memo[pos][isSmaller]
    if (memo[pos] === undefined) memo[pos] = {}

    if (isSmaller) {
        memo[pos][isSmaller] = helper2(n,num,pos+1,isSmaller,base/10,memo)*10 + (10**(num.length-pos-1))
    } else {
        let current = parseInt(num[pos])
        //go smaller or stay equal
        let smaller = helper2(n,num,pos+1,true,base/10,memo)*(current)
        if (current>=2) smaller += 10**(num.length-pos-1)//gaurantee to cover a 1 

        let equal = helper2(n,num,pos+1,false,base/10,memo)
        if (current===1) equal += n%base + 1 
        memo[pos][isSmaller] = smaller + equal
    }
    return memo[pos][isSmaller]
}
let n = 1
console.log(countDigitOne2(n))
