C++:
//time: O(n)
//quickselect
bool comp (vector<int>& p, vector<int>& q) {
    return p[1]>q[1];
}

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> hash;
        for (int i=0; i<nums.size(); i++) {
            if (hash.count(nums[i])>0) {
                hash[nums[i]]++;
            } else {
                hash[nums[i]] = 1;
            }
        }
        
        vector<vector<int>> vec;
        for (auto& [key,val] : hash) {
            vector<int> sub{key,val};
            vec.push_back(sub);
        }
        
        nth_element(vec.begin(),vec.begin()+k-1,vec.end(),comp);
        
        vector<int> ans;
        for (int i=0; i<k; i++) {
            ans.push_back(vec[i][0]);
        }
        return ans;
    }
};

//O(n)
//bucketsort
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> hash;
        for (int num : nums) 
            hash[num]++;
        
        vector<vector<int>> bucket(nums.size()+1);
        for (auto& [key,freq] : hash) {
            bucket[freq].push_back(key);
        }
        
        vector<int> ans;
        for(int i=bucket.size()-1; i>=0; i--) {
            for (int j=0; j<bucket[i].size() && ans.size()<k; j++) {
                ans.push_back(bucket[i][j]);
            }
        }
        return ans;
    }
};




JS:
var topKFrequent = function(nums, k) {
    let map = new Map();
    for (let num of nums) {
        if (!map.has(num)) map.set(num,0)
        map.set(num,map.get(num)+1);
    }
    let arr = [];
    for (let entry of map.entries()) {
        arr.push(entry);
    }
    
    quickSelect(arr,k)
    
    let ans = []
    for (let i=0; i<k; i++) {
        ans.push(arr[i][0]);
    }
    return ans;
};

//find the k most frequent elements
//=> the k biggest [1] elements
let quickSelect = (arr,k,left=0,right=arr.length-1) => {
    if (left>=right) return 
    let pivot = arr[right][1];
    let startOfNotBigger = left;
    for (let i=left; i<right; i++) {
        if (arr[i][1]>pivot) {
            swap(arr,i,startOfNotBigger)
            startOfNotBigger++
        }
    }
    swap(arr,right,startOfNotBigger);
    if (startOfNotBigger<k-1) {
        quickSelect(arr,k,startOfNotBigger+1,right)
    } else {
        quickSelect(arr,k,left,startOfNotBigger-1)
    }
    return
} 

let swap = (arr,a,b) => {
    let temp = arr[a];
    arr[a] = arr[b];
    arr[b] = temp;
    return 
}
