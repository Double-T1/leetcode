/**
 * Definition of Interval:
 * classs Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this->start = start;
 *         this->end = end;
 *     }
 * }
 */

bool comp(Interval& a, Interval& b) {
    return a.start<b.start;
}

class Solution {
public:
    int minMeetingRooms(vector<Interval> &intervals) {
        sort(intervals.begin(),intervals.end(),comp);
        priority_queue<int, vector<int>, greater<int>> pq;
        for (auto& time: intervals) {
            int start = time.start, end = time.end;
            if (!pq.empty() && pq.top()<=start) {
                pq.pop(); 
            } 
            pq.push(end);
        }
        return pq.size();
    }
};


/**
1. non-overlapping interval can be of the same component
2. count the min possible amount of intervals

steps:
1. for each start, find an empty prev end that is smaller than or equal to it. 
=> or just use the smallest empty end
2. update it with the current end
=> a minheap for end







*/
