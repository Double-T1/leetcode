//time: O(m*n) 
//space: O(m*n)
class Solution {
private:
    int row[8] = {1,1,1,0,0,-1,-1,-1};
    int col[8] = {1,0,-1,1,-1,1,0,-1};

public:
    void gameOfLife(vector<vector<int>>& board) {
        int m = board.size(), n = board[0].size();
        //pointer or reference??
        vector<vector<int>> ans (m,vector<int>(n,0));
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                int count = countNeigh(board,i,j);
                if (board[i][j] == 1) {
                    if (count>=2 && count<=3) ans[i][j] = 1;
                } else {
                    if (count == 3) ans[i][j] = 1;
                }
            }
        } 
        board = ans;
    }
    
private:
    int countNeigh(vector<vector<int>>& board, int i, int j) {
        int count = 0;
        for (int k=0; k<8; k++) {
            count += isOne(board,i+row[k],j+col[k]);
        }
        return count;
    }
    
    int isOne(vector<vector<int>>& board, int i, int j) {
        if (i>=0 && i<board.size() && j>=0 && j<board[0].size()) return board[i][j];
        return 0;
    }
};

//time: O(m*n)
//space: O(1)
class Solution {
private:
    int row[8] = {1,1,1,0,0,-1,-1,-1};
    int col[8] = {1,0,-1,1,-1,1,0,-1};

public:
    void gameOfLife(vector<vector<int>>& board) {
        int m = board.size(), n = board[0].size();
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                int count = countNeigh(board,i,j);
                board[i][j] += 10*count;
            }
        } 
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                int n = board[i][j]/10;
                if (board[i][j]%10 == 1) {
                    if (n>=2 && n<=3) board[i][j] = 1;
                    else board[i][j] = 0;
                } else {
                    if (n == 3) board[i][j] = 1;
                    else board[i][j] = 0;
                }
            }
        } 
    }
    
private:
    int countNeigh(vector<vector<int>>& board, int i, int j) {
        int count = 0;
        for (int k=0; k<8; k++) {
            count += isOne(board,i+row[k],j+col[k]);
        }
        return count;
    }
    
    int isOne(vector<vector<int>>& board, int i, int j) {
        if (i>=0 && i<board.size() && j>=0 && j<board[0].size()) return board[i][j]%10;
        return 0;
    }
};
