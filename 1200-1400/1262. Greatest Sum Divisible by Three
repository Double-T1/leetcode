//heap out of memory
var maxSumDivThree = function(nums) {
    return helper(nums)
};

let helper = (nums,i=0,sum=0,memo={}) => {
    if (i in memo && sum in memo[i]) return memo[i][sum]
    if (memo[i] === undefined) memo[i] = {}

    if (i === nums.length) {
        if (sum%3 === 0) {
            memo[i][sum] = sum
        } else {
            memo[i][sum] = 0
        }
    } else {
        memo[i][sum] = Math.max(helper(nums,i+1,sum,memo),helper(nums,i+1,sum+nums[i],memo))
    }
    return memo[i][sum]
}

//using hashtable
var maxSumDivThree2 = function(nums) {
    let map = [0,0,0]
    for (let i=0; i<nums.length; i++) {
        let res = nums[i]%3
        let com = (3-res)%3
        let c = []
        c[0] = map[com] + nums[i]
        c[1] = map[(com+1)%3] + nums[i]
        c[2] = map[(com+2)%3] + nums[i]
        if (c[0]%3===0) map[0] = Math.max(map[0],c[0])            
        if (c[1]%3===1) map[1] = Math.max(map[1],c[1])
        if (c[2]%3===2) map[2] = Math.max(map[2],c[2])
    }

    return map[0]
};

//from solution 1
//chaching with relevant information only
var maxSumDivThree3 = function(nums) {
    return helper3(nums)
};

let helper3 = (nums,i=0,res=0,memo={}) => {
    if (i in memo && res in memo[i]) return memo[i][res]
    if (memo[i] === undefined) memo[i] = {}

    if (i === nums.length) {
        if (res === 0) {
            memo[i][res] = 0
        } else {
            memo[i][res] = -Infinity
        }
    } else {
        memo[i][res] = Math.max(helper3(nums,i+1,res,memo),helper3(nums,i+1,(res+nums[i])%3,memo)+nums[i])
    }
    return memo[i][res]
}

//bottom up
var maxSumDivThree4 = function(nums) {
    let dp = [0,-Infinity,-Infinity]
    for (let i=nums.length-1; i>=0; i--) {
        let dup = []
        for (let j=2; j>=0; j--) {
            dup[j] = Math.max(dp[j],dp[(j+nums[i])%3]+nums[i])
        }
        dp = dup
    }
    return dp[0]
};

let  nums = [1,2,3,4,4]
console.log(maxSumDivThree4(nums))
