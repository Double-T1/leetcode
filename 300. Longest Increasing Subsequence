//patience sort
//time: O(nlogn)
//space: O(k)
var lengthOfLIS = function(nums) {
    let record = [nums[0]]
    for (let i=1; i<nums.length; i++) {
        searchAndReplace(record,nums[i])
    }
    return record.length
};

let searchAndReplace = (record,val) => {
    let left = 0
    let right = record.length
    while (left<right) {
        let mid = left + Math.floor((right-left)/2)
        if (record[mid] >= val) {
            right = mid
        } else {
            left = mid+1
        }
    }
    record[left] = val
    return 
}

//slightly change the approach to, what is the LIS for each index as the start?
//then find the max of them all
//twitch can be seen in Kadane's Algo as well
//time: O(n**2)
var lengthOfLIS = function(nums) {
    //actually looking for the length of LIS starting from each node
    let length = [1]
    let max = 1
    let count = 1
    for (let i=1; i<nums.length; i++) {
        length[i] = 1
        for (let j=i-1; j>=0; j--) {
            if (nums[i]>nums[j]) {
                length[i] = Math.max(length[i],length[j]+1)
                max = Math.max(length[i],max)
            }
        }
    }    
    return max
};

//a lot slower
//this effectively becomes O((n+2)**2)
//reason 1. we insert a new number in the front (making it n+1)
//reason 2. we check till j === nums.length, effectively incuding 1 one element at the end (this n+1+1) 
var lengthOfLIS2 = function(nums) {
    nums.unshift(Number.MIN_SAFE_INTEGER)
    return helper(nums)
};


let helper = (nums,i=0,j=1,memo={}) => {
    if (i in memo && j in memo[i]) return memo[i][j]
    if (memo[i] === undefined) memo[i] = {}

    if (j===nums.length) {
        memo[i][j] = 0
    } else {
        if (nums[j]>nums[i]) {
            memo[i][j] = Math.max(1+helper(nums,j,j+1,memo),helper(nums,i,j+1,memo))
        } else {
            memo[i][j] = helper(nums,i,j+1,memo)
        }
    }
    return  memo[i][j]
}



let nums = [4,10,3]
console.log(lengthOfLIS3(nums))
