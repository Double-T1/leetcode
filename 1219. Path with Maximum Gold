//brute force
class Solution {
private:
    int row[4] = {1,0,-1,0};
    int col[4] = {0,1,0,-1};
    
public:
    int getMaximumGold(vector<vector<int>>& grid) {
        int ans = 0;
        for (int i=0; i<grid.size(); i++) {
            for (int j=0; j<grid[i].size(); j++) {
                ans = max(ans,backtrack(grid,i,j));
            }
        }
        return ans;
    }
    
private:
    int backtrack(vector<vector<int>>& grid, int i, int j) {
        if (i<0 || i>=grid.size() || j<0 || j>=grid[0].size() || grid[i][j] == 0) return 0;
        
        int cur = grid[i][j], res = 0;
        grid[i][j] = 0;
        for (int k=0; k<4; k++) {
            res = max(res,backtrack(grid,i+row[k],j+col[k]));
        }
        grid[i][j] = cur;
        return cur + res;
    }
};



var getMaximumGold = function(grid) {
    let max = 0
    for (let i=0; i<grid.length; i++) {
        for (let j=0; j<grid[i].length; j++) {
            if (grid[i][j] === 0) continue
            max = Math.max(max,dfs(grid,i,j))
        }
    }
    return max
};

let dfs = (grid,i,j) => {
    let temp = grid[i][j]
    grid[i][j] = 0
    let max = temp
    let actionSpace = [[i+1,j],[i-1,j],[i,j+1],[i,j-1]]
    for ([i,j] of actionSpace) {
        if (i>=0 && i<grid.length && j>=0 && j<grid[i].length && grid[i][j] !== 0) {
            max = Math.max(dfs(grid,i,j)+temp,max)
        }
    }
    grid[i][j+1] = temp
    return max
}


let grid =[[1,0,7,0,0,0],[2,0,6,0,1,0],[3,5,6,7,4,2],[4,3,1,0,2,0],[3,0,5,0,20,0]]
console.log(getMaximumGold2(grid))
