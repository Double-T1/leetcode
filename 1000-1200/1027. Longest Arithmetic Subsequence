//all three solutions have a O(n**2) runtime, yet they differ immensly in reality
//the key is the difference in the usage of data structure
//solution one is the slowest, where naive object is utilize as a dictionary
//solution two uses a hashmap as the dictionary
//solution three leverages a nested array as the required dictionary
//solution three is by far the fastest of the three given its superiority in searching time complexity

//timeL O(n**2)
var longestArithSeqLength = function(nums) {
    let dp = {}
    dp[0] = {}
    dp[0][0] = 1
    let max = 1
    for (let i=1; i<nums.length; i++) {
        dp[i] = {}
        dp[i][0] = 1
        for (let j=i-1; j>=0; j--) {
            let diff = nums[i]-nums[j]
            let temp = dp[i][diff] !== undefined? dp[i][diff] : 0
            if (diff in dp[j]) {
                dp[i][diff] = Math.max(temp,dp[j][diff]+1)
            } else {
                dp[i][diff] = Math.max(temp,2)
            }
            max = Math.max(max,dp[i][diff])
        }
    }
    return max
};

//optimized
//key observation:
//if a number has appeared before, then the more current one will have a longer ariSeq
var longestArithSeqLength2 = function(nums) {
    let dp = new Map()
    dp.set(0,new Map())
    let max = 1
    for (let i=1; i<nums.length; i++) {
        dp.set(i,new Map())
        for (let j=i-1; j>=0; j--) {
            let diff = nums[i]-nums[j]
            if (!dp.get(j).has(diff)) dp.get(j).set(diff,1)
            if (!dp.get(i).has(diff)) dp.get(i).set(diff,0)
            let a = dp.get(j).get(diff)
            dp.get(i).set(diff,Math.max(dp.get(i).get(diff),a+1)) 
            max = Math.max(max,dp.get(i).get(diff))
        }
    }
    return max
};

var longestArithSeqLength3 = function(nums) {
    let maxV = 0
    for (let num of nums) {
        maxV = Math.max(maxV,num)
    }

    let dp = new Array(2*maxV+1)
        .fill()
        .map(() => new Array(nums.length))
    let len = 1

    for (let i=1; i<nums.length; i++) {
        for (let j=0; j<i; j++) {
            let diff = nums[i] - nums[j] + maxV
            if (dp[diff][i] === undefined) dp[diff][i] = 0
            if (dp[diff][j] === undefined) dp[diff][j] = 0
            dp[diff][i] = Math.max(dp[diff][i],dp[diff][j]+1)
            len = Math.max(len,dp[diff][i]+1)
        }
    }
    return len
};
let nums = [20,1,15,3,10,5,8]
console.log(longestArithSeqLength3(nums))


//C++
class Solution {
public:
    int longestArithSeqLength(vector<int>& nums) {
        unordered_map<int,int> hashmap[nums.size()];
        int ans = 2;
        for (int i=1; i<nums.size(); i++) {
            int cur = nums[i];
            for (int j=i-1; j>=0; j--) {
                int diff = cur - nums[j];
                if (!hashmap[j].count(diff)) {
                    hashmap[i][diff] = max(hashmap[i][diff],2);
                } else {
                    hashmap[i][diff] = max(hashmap[i][diff],hashmap[j][diff]+1);
                }
                ans = max(ans,hashmap[i][diff]);
            }
        }
        return ans;
    }
};
