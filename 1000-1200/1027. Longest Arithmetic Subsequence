//timeL O(n**2)
var longestArithSeqLength = function(nums) {
    let dp = {}
    dp[0] = {}
    dp[0][0] = 1
    let max = 1
    for (let i=1; i<nums.length; i++) {
        dp[i] = {}
        dp[i][0] = 1
        for (let j=i-1; j>=0; j--) {
            let diff = nums[i]-nums[j]
            let temp = dp[i][diff] !== undefined? dp[i][diff] : 0
            if (diff in dp[j]) {
                dp[i][diff] = Math.max(temp,dp[j][diff]+1)
            } else {
                dp[i][diff] = Math.max(temp,2)
            }
            max = Math.max(max,dp[i][diff])
        }
    }
    return max
};

//optimized
//key observation:
//if a number has appeared before, then the more current one will have a longer ariSeq
var longestArithSeqLength2 = function(nums) {
    let dp = {}
    dp[0] = {}
    dp[0][0] = 1
    let max = 1
    for (let i=1; i<nums.length; i++) {
        dp[i] = {}
        dp[i][0] = 1
        for (let j=i-1; j>=0; j--) {
            let diff = nums[i]-nums[j]
            if (diff in dp[j]) {
                dp[i][diff] = Math.max(temp,dp[j][diff]+1)
            } else {
                dp[i][diff] = Math.max(temp,2)
            }
            max = Math.max(max,dp[i][diff])
        }
    }
    return max
};
let nums = [20,1,15,3,10,5,8]
console.log(longestArithSeqLength(nums))
