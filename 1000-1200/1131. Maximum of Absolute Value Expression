//brute force
//slow
//time: O(8*n)
class Solution {
private:
    int poss[2] = {1,-1};
    
public:
    int maxAbsValExpr(vector<int>& arr1, vector<int>& arr2) {
        vector<int> space(8), dup(8);
        int ans = 0;
        for (int i=0; i<arr1.size(); i++) {  
            dup.clear();
            for (auto one : poss) {
                for (auto two: poss) {
                    for (auto three: poss) {
                        dup.push_back(arr1[i]+two*arr2[i]+three*i);
                    }
                }
            }
            
            
            for (int j=0; j<8 && i>0; j++) {
                if (j<4) ans = max(ans,space[j]-dup[j]), space[j] = max(space[j],dup[j]);
                else ans = max(ans,-space[j]+dup[j]), space[j] = min(space[j],dup[j]);
            }
            if (i == 0) swap(space,dup);
        }
        return ans;
    }
};

/*
abs(a) + abs(b) = max(a+b,a-b,-a-b,b-a)
=> max((a1i-a1j+a2i-a2j),(a1i-a1j+a2j-a2i),(a1j-a1i+a2j-a2i),(a1j-a1i+a2i-a2j));
=> max(a1i+a2i-(a1ij+a2j),(a1i-a2i)-(a1j-a2j),-(a1i+a2i)+(a1j+a2j),-(a1i-a2i)+(a1j-a2j))
1. (a1i+a2i+i)-(a1j+a2j+j)
2. (a1i+a2i-i)-(a1j+a2j-j)
3. (a1i-a2i+i)-(a1j-a2j+j)
4. (a1i-a2i-i)-(a1j-a2j-j)

7. -(a1i-a2i-i)+(a1j-a2j-j)
8. -(a1i-a2i+i)+(a1j-a2j+j)
5. -(a1i+a2i-i)+(a1j+a2j-j)
6. -(a1i+a2i+i)+(a1j+a2j+j)




1. for every element, get its a1i+a2i as pos and a1i-a2i as neg
2. after each element, get maximum pos, neg,and minimum pos and neg


abs(A) + abs(B) => max(A+B,A-B,-A+B,-A-B)
abs(A) + abs(B) + abs(C) => max(A+B+C,A+B-C,A-B+C,A)
*/
