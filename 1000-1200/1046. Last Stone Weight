class Solution {
public:
    int lastStoneWeight(vector<int>& stones) {
        make_heap(stones.begin(),stones.end());
        int one, two, three;
        while (stones.size()>1) {
            one = stones[0];
            pop_heap(stones.begin(),stones.end());
            stones.pop_back();
            two = stones[0];
            pop_heap(stones.begin(),stones.end());
            stones.pop_back();
            
            three = max(two,one) - min(two,one);
            if (three) {
                stones.push_back(three);
                push_heap(stones.begin(),stones.end());
            }
        }
        if (stones.size() == 0) return 0;
        return stones[0];
    }
};

class Solution {
public:
    int lastStoneWeight(vector<int>& stones) {
        int one, two, three;
        priority_queue<int> pq(stones.begin(),stones.end());
        while (pq.size()>1) {
            one = pq.top();
            pq.pop();
            two = pq.top();
            pq.pop();
            
            three = max(one,two) - min(one,two);
            if (three>0) pq.push(three);
        }
        if (pq.size()==0) return 0;
        return pq.top();
    }
};
