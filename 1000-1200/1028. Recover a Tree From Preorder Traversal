//can be solved by a stack or a hashmap
//we used hashmap here
//the runtime and space complexity have the same asymptotic properties
//time: O(s) s is the length of the string
//space: O(n) n is the length of the converted array from the string, n<=s 
class TreeNode {
    constructor(val=0,left=null,right=null) {
        this.val = val
        this.left = left
        this.right = right
    }
}

var recoverFromPreorder = function(traversal) {
    //preprocess the string
    let arr = []
    let ele = '', count=0
    traversal += '+'
    for (let i=0; i<traversal.length; i++) {
        if (/\d/.test(traversal[i])) {
            if (count>0) arr.push(count), count=0
            ele = ele + traversal[i]
        } else {
            if (ele !== '') arr.push(ele), ele = ''
            count++
        }
    }

    let map = new Map()
    let pseudoRoot = new TreeNode()
    let parent = pseudoRoot
    let level = 0
    for (let i=0; i<arr.length; i++) {
        if (typeof arr[i] === 'string') {
            let node = new TreeNode(parseInt(arr[i]))
            if (parent.left) parent.right = node
            else parent.left = node

            map.set(level,node)
        } else {
            level = arr[i]
            parent = map.get(level-1)
        }
    }
    return pseudoRoot.left
};


let traversal = "1-2--3--4-5--6--7"
console.log(recoverFromPreorder(traversal))
