//soltuion 1 treemap
//time: O(nlogn)
//space: O(n)
class Solution {
private:
    multiset<int> ms;
    
public:
    int longestSubarray(vector<int>& nums, int limit) {
        int len = 1;
        for (int i=0,j=0; j<nums.size(); j++) {
            ms.insert(nums[j]);
            
            if (this->getDiff()>limit) {
                ms.erase(ms.find(nums[i++]));
            }
            
            len = max(len,j-i+1);
        }
        return len;
    }
private:
    int getDiff() {
        if (ms.empty()) return 0;
        return *(ms.rbegin())-*(ms.begin());
    }
};

//solution 2 deque
//time: O(n)
//space: O(n)
class Solution {
public:
    int longestSubarray(vector<int>& nums, int limit) {
        int i=0, j=0;
        deque<int> maxd, mind;
        for (;j<nums.size(); j++) {
            while(!maxd.empty() && maxd.back()<nums[j]) maxd.pop_back();
            while(!mind.empty() && mind.back()>nums[j]) mind.pop_back();
            maxd.push_back(nums[j]);
            mind.push_back(nums[j]);
            
            if (maxd.front() - mind.front() > limit) {
                if (maxd.front() == nums[i]) maxd.pop_front(); 
                //given that this is a monotonic seq, if nums[i] is not the front element, 
                //it is already pop_out previously because it is too small
                if (mind.front() == nums[i]) mind.pop_front();
                i++;
            }
        }
        return j-i;
    }
};
