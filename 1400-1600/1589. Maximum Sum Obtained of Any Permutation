//time: O(n*r)
var maxSumRangeQuery = function(nums, requests) {
    let mod = 10**9+7
    let arr = new Array(nums.length).fill(0)
    for (let [start,end] of requests) {
        for (let i= start; i<=end; i++) {
            arr[i]++
        }
    }
    
    let freq = []
    for (let co of arr) {
        if (co>0) freq.push(co)
    }
    
    freq.sort((a,b) => b-a)
    nums.sort((a,b) => b-a)
    let ans = 0
    for (let i=0; i<freq.length; i++) {
        ans += freq[i]*nums[i]
        ans %= mod
    }
    return ans
};

//time: (nlogn)
var maxSumRangeQuery2 = function(nums, requests) {
    let arr = new Array(nums.length).fill(0)
    let mod = 10**9+7
    for (let [start,end] of requests) {
        arr[start]++
        arr[end+1]--
    }

    let freq = []
    let cf = 0
    for (let i=0; i<arr.length; i++) {
        cf += arr[i]
        if (cf>0) freq.push(cf)
    }

    freq.sort((a,b) => b-a)
    nums.sort((a,b) => b-a)
    let ans = 0
    for (let i=0; i<freq.length; i++) {
        ans += freq[i]*nums[i]
        ans %= mod
    } 
    return ans
};
/**
1. tryout all permutations and count the sum of each
time: O(n!*(n+r))
TLE
2. reduce the requests array ? time?
e.g. [[0,2],[1,3],[1,1]] => a0 + a1 + a2 + a1 + a2 + a3 + a1 => a0 + 3a1 + 2a2 + a3 or [[0,2],[1,1],[1,3]]
[10,5,4,3,2,1]
=>ã€€greedy, pair the largest number with the largest coefficient
sort(nlogn) + reduce request(n*r) + n
(n*r) => r? 
*/
