int find(int x,vector<int>& parent) {
    if (parent[x] != x) {
        parent[x] = find(parent[x],parent);
    } 
    return parent[x];
}

void Union(int a, int b, vector<int>& parent) {
    int pa = find(a,parent), pb = find(b,parent);
    if (pa != pb) parent[pb] = pa;
}


class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        vector<int> parent(nums.size(),-1);
        unordered_map<int, int> hashmap;
        
        for (int i=0; i<nums.size(); i++) {
            int num = nums[i];
            parent[i] = i;
            if (hashmap.count(num)) continue;
            hashmap[num] = i;
            int prev = num-1, post = num+1;
            if (hashmap.count(prev)) Union(hashmap[prev],i,parent);
            if (hashmap.count(post)) Union(hashmap[post],i,parent);
        }
        
        int mx = 0;
        unordered_map<int, int> size; 
        for (int p : parent) {
            p = find(p,parent);
            size[p]++;
            mx = max(mx,size[p]);
        }
        return mx;
    }
};



function Node (val,prev,next) {
    this.val = val
    this.next = next
    this.prev = prev
}

//values might not be unique
var longestConsecutive = function(nums) {
    let map = new Map()
    for (let i=0; i<nums.length; i++) {
        let prev = nums[i]-1
        let next = nums[i]+1
        if (!map.has(nums[i])) {
            let node = new Node(nums[i])
            map.set(nums[i],node)
            if (map.has(prev)) {
                prev = map.get(prev)
                node.prev = prev
                prev.next = node
            }
            if (map.has(next)) {
                next = map.get(next)
                node.next = next
                next.prev = node
            }
        }
    }

    let max = 0
    for (let node of map.values()) {
        if (node.val !== null) {
            max = Math.max(count(node,map),max)
        } 
    }
    return max
};

let count = (node) => {
    node.val = null
    let prev = node.prev 
    let next = node.next
    let count = 1
    while (prev) {
        count++
        prev.val = null
        prev = prev.prev
    }
    while (next) {
        count++
        next.val = null
        next = next.next
    }
    return count
}

let nums = [0,3,7,2,5,8,4,6,0,1]
console.log(longestConsecutive(nums))
