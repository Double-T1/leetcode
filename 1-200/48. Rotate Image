class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n= matrix.size();
        for (int i=0; i<n/2; i++) {
            for (int j=i; j<n-i-1; j++) {
                swap(matrix[i][j],matrix[n-j-1][i]);
                swap(matrix[n-j-1][i],matrix[n-1-i][n-1-j]);
                swap(matrix[n-i-1][n-j-1],matrix[j][n-i-1]);
            }
        }
    }
};

//solution 2
//same complexity different approach
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        transpose(matrix);
        reverse(matrix);
    }
    
private:
    void transpose(vector<vector<int>>& matrix) {
        int n = matrix.size();
        for (int i=0; i<n; i++) {
            for (int j=0; j<n-i; j++) {
                swap(matrix[i][j],matrix[n-j-1][n-i-1]);
            }
        }
    }
    void reverse(vector<vector<int>>& matrix) {
        int n = matrix.size();
        for (int i=0; i<(n/2); i++) {
            for (int j=0; j<n; j++) {
                swap(matrix[i][j],matrix[n-1-i][j]);
            }        
        }
    }
};
