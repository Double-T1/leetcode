//n = total number of nodes
//k = number of lists
//soultion2 is much faster

//time: O(kn) 
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.size() == 0) return nullptr;
        auto ans = lists[0];
        for (int i=1; i<lists.size(); i++) {
            ans = mergeTwoLists(ans,lists[i]);
        }
        return ans;
    }
    
private:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode temp;
        ListNode* pseudoHead = &temp;
        auto cur = pseudoHead;
        while (l1 && l2) {
            if (l1->val>l2->val) {
                cur->next = l2;
                l2 = l2->next;
            } else {
                cur->next = l1;
                l1 = l1->next;
            }
            cur = cur->next;
            cur->next = NULL;
        }
        if (l1) cur->next = l1;
        else if (l2) cur->next = l2;
        
        return pseudoHead->next;
    } 
};

//time: O(nlogk)
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.size() == 0) return nullptr;
        return helper(lists,0,lists.size()-1);
    }
    
private:
    ListNode* helper(vector<ListNode*>& lists, int i, int j) {
        if (i == j) return lists[i];
        auto left = helper(lists,i,(j+i)/2);
        auto right = helper(lists,(j+i)/2+1,j);
        return mergeTwoLists(left,right);
    }
    
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode temp;
        ListNode* pseudoHead = &temp;
        auto cur = pseudoHead;
        while (l1 && l2) {
            if (l1->val>l2->val) {
                cur->next = l2;
                l2 = l2->next;
            } else {
                cur->next = l1;
                l1 = l1->next;
            }
            cur = cur->next;
            cur->next = NULL;
        }
        if (l1) cur->next = l1;
        else if (l2) cur->next = l2;
        
        return pseudoHead->next;
    } 
};
