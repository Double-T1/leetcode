//recursion
//stack

//stack1
//time: O(n)
//the actual runtime will be around 2n
//space: O(n)
var reorderList = function(head) {
    let slow = head
    let fast = head
    while (fast && fast.next && fast.next.next) {
        fast = fast.next.next
        slow = slow.next
    }
    if (fast === slow) return head

    //pushing the second half the list into the array
    let stack = []
    while (slow && slow.next) {
        slow = slow.next
        stack.push(slow)
    }

    //the second half should be equal to the first half
    //or smaller by one node
    let current = head
    while (stack.length) {
        let node = stack.pop()
        node.next = current.next
        current.next = node
        current = current.next.next
    }
    current.next = null
    return head
};

//stack2?
//time: O(n) but optimized
//space: O(n)
var reorderList2 = function(head) {
    let slow = head
    let fast = head
    let stack = [head]
    while (fast && fast.next && fast.next.next) {
        fast = fast.next.next
        slow = slow.next
        stack.push(slow)
    }
    if (fast === slow) return head

    //the second half should be equal to the first half
    //or smaller by one node
    slow = slow.next //the start of the second half
    let end = slow
    if (!fast.next) end = stack.pop()
    while (stack.length) {
        let temp = slow.next
        let node = stack.pop()
        slow.next = node.next
        node.next = slow
        slow = temp
    }
    end.next = null
    return head
};

//recursion 
//follows the same concept as stack2
//but utilize the internal stack
var reorderList3 = function(head) {
    recur(head,head)
    return head
};

//the current node would be slow
let recur = (fast,slow) => {
    if (fast.next && fast.next.next) {
        let target = recur(fast.next.next,slow.next)
        let temp = target.next
        target.next = slow.next
        slow.next = target
        return temp
    } else {
        let temp = slow.next
        if (fast.next) {
            temp = temp.next
            slow.next.next = null
        } else {
            slow.next = null
        }
        return temp
    }
}

//space optimization
//time: O(n) the actual runtime is approximately 2n, which is slower then the solution 2 and 3. 
//space: O(1)
var reorderList4 = function(head) {
    //step 1, find the mid
    //step 2, reverse the second half
    //step 3, merget the first and second half one at a time
    
    // step 1
    let fast = head
    let slow = head
    //slow should become the end of the first half here
    while (fast.next && fast.next.next) {
        fast = fast.next.next
        slow = slow.next
    }
    if (slow === fast) return head
    
    //step 2
    let l2 = reverse(slow.next)
    slow.next = null

    //step 3
    merge(head,l2)

    return head
};

let reverse = (head) => {
    let next = head.next
    head.next = null
    while (next) {
        let temp = next.next
        next.next = head
        head = next
        next = temp
    }
    return head
}

let merge = (l1,l2) => {
    while (l1 && l2) {
        let next = l1.next
        l1.next = l2
        l1 = l2
        l2 = next
    }
    return
}
