class Solution {
public:
    int strStr(string& haystack, string& needle) {
        if (needle.size() == 0) return 0;
        return haystack.find(needle);
    }
};

//kmp
class Solution {
public:
    int strStr(string& haystack, string& needle) {
        int n = needle.size();
        if (n == 0) return -1;
        vector<int> table(n,0);
        for (int i=0, j=1; j<n;) {
            if (needle[i] == needle[j]) table[j++] = ++i;
            else if (i>0) i = table[i-1];
            else j++;
        }
        
        
        for (int i=0, j=0; i<haystack.size();) {
            if (haystack[i] == needle[j]) j++, i++;
            else if (j>0) j = table[j-1];
            else i++;
            
            if (j == table.size()) return i-j;
        }
        return -1;
    }
};

/**
create a kmp table of needle
then run it through haystack



*/
