//time: O(n**3)
var minCut = function(s) {
    return helper2(s)-1
};

//not finding cuts, but finding the number of valid substrings here
let helper2 = (s,i=0,memo=[]) => {
    if (i === s.length) return 0
    if (i in memo) return memo[i]
    let cut = Number.MAX_SAFE_INTEGER
    for (let j=i; j<s.length; j++) {
        if (!isPalindrome(s,i,j)) continue
        cut = Math.min(cut,helper2(s,j+1,memo)+1)
    }
    memo[i] = cut
    return cut
}

let isPalindrome = (s,i,j) => {
    let x = i+j
    let left = Math.floor(x/2)
    let right = left+1
    if (x%2 === 0) right = left
    while (left>=i && right<=j) {
        if (s[left] !== s[right]) return false
        left--
        right++
    }
    return true
}

//bottom up
//time: O(n**3)
//space: O(n)
var minCut2 = function(s) {
    let dp = new Array(s.length)
    dp.push(0)
    for (let i=s.length-1; i>=0; i--) {
        dp[i] = Number.MAX_SAFE_INTEGER
        for (let j=s.length-1; j>=i; j--) {
            if (!isPalindrome2(s,i,j)) continue
            dp[i] = Math.min(dp[i],dp[j+1]+1)
        }
    }
    return dp[0]-1
};

let isPalindrome2 = (s,i,j) => {
    let x = i+j
    let left = Math.floor(x/2)
    let right = left+1
    if (x%2 === 0) right = left
    while (left>=i && right<=j) {
        if (s[left] !== s[right]) return false
        left--
        right++
    }
    return true
}

//time optimized => using the feature of a palindrome
//time: O(n^2)
var minCut3 = function(s) {
    let dp = [] // what is the most cut from index 0 to index i
    let valid = []
    for (let i=0; i<s.length; i++) {
        //edge case of j===i
        valid[i] = []
        dp[i] = i
        for (let j=0; j<=i; j++) {
            if (s[i] === s[j] && (j+1>i-1 || valid[j+1][i-1])) {
                valid[j][i] = true
                let prev = j>0? dp[j-1]+1 : 0
                dp[i] = Math.min(dp[i],prev)                
            }
        }
    }
    return dp[s.length-1]
};

//space optimized => using the feature of a palindrome
//time: O(n^2)
//space: O(n)
var minCut4 = function(s) {
    let dp = new Array(s.length)
    //the maximum amount of cut for s[:i]
    for (let i=0; i<dp.length; i++) {
        dp[i] = i
    }
    
    for (let i=0; i<dp.length; i++) {
        //odd length
        for (let j=0; j<=i && j+i<dp.length && s[i-j] === s[i+j]; j++) {
            let prev = i-j>0? dp[i-j-1] : -1
            dp[i+j] = Math.min(prev+1,dp[i+j])
        }

        //even length
        for (let j=1; j<=i && j+i-1<dp.length && s[i-j] === s[i+j-1]; j++) {
            let prev = i-j>0? dp[i-j-1] : -1
            dp[i+j-1] = Math.min(prev+1,dp[i+j-1])
        }
    }
    return dp[s.length-1]
};

let s = "aab"
console.log(minCut3(s))
