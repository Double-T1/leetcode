class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* pseudo = new ListNode();
        pseudo->next = head;
        auto p1 = pseudo, p2=pseudo;
        //p2 will stop at he
        while (n) {
            n--;
            p1 = p1-> next;
        }
        while (p1->next) {
            p2 = p2->next;
            p1 = p1->next;
        }
        p2->next = p2->next->next;
        
        return pseudo->next;
    }
};

//same time complexity
//but with pointer of pointer
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* p1 = head;
        ListNode** p2 = &head;
        for (int i=0; i<n; i++) {
            p1 = p1->next;
        }
        while (p1) {
            p1 = p1->next;
            p2 = &((*p2)->next);
        }
        auto prev = *p2;
        *p2 = prev->next; 
        //why won't prev = prev->next work??
        //or why won't *p2 = *p2->next work??
        return head;
    }
};
