//easiest: bubble=> O(n^2)
var sortList = function(head) {
    let end = null
    while (head && head.next !== end) {
        let current = head
        while (current && current.next && current.next !== end) {
            if (current>current.next) {
                let temp = current.next.val
                current.next.val = current.val
                current.val = temp
            }
            current = current.next
        }
        end = current
    }
    return head
};

//O(nlogn) time, O(1) space => merge sort or quick sort
//quick sort first
var sortList2 = function(head) {
    let end = head
    while (end && end.next) {
        end = end.next
    }
    quickSort(head,end)
    return head
};

//[s,e]
let quickSort = (start,end) => {
    if (start === null || !end || start === end || end.next === start) return 
    let pivot = end.val
    let pointer = start
    let startOfBigger = start //the start of all elements bigger than pivot
    let endOfSmaller = null
    while (pointer !== end) {
        if (pointer.val<pivot) {
            swap(startOfBigger,pointer)
            endOfSmaller = startOfBigger
            startOfBigger = startOfBigger.next
        }
        pointer = pointer.next
    }
    swap(startOfBigger,end)
    quickSort(startOfBigger.next,end)
    quickSort(start,endOfSmaller)
    return
}

let swap = (node1,node2) => {
    let temp = node1.val
    node1.val = node2.val
    node2.val = temp
    return
}

//merge sort
var sortList3 = function(head) {
    if (!head || !head.next) {
        return head
    } else {
        let pseudoHead = new ListNode()
        pseudoHead.next = head
        let slow = pseudoHead
        let fast = head
        while (fast && fast.next) {
            fast = fast.next.next
            slow = slow.next
        }
        let head2 = slow.next
        slow.next = null
        return merge(sortList3(head),sortList3(head2))
    }
};

let merge = (head1,head2) => {
    let p1 = head1, p2 = head2
    let newHead = new ListNode()
    let node = newHead
    while (p1 && p2) {
        if (p1.val<p2.val) {
            node.next = p1
            p1 = p1.next
        } else {
            node.next = p2
            p2 = p2.next
        }
        node = node.next
        node.next = null
    }
    node.next = p1 !== null? p1 : p2 !== null? p2 : null 
    return newHead.next
}

//quicksort ver 2.
var sortList4 = function(head) {
   return quickSort2(head)
};

//[s,e]
let quickSort2 = (start) => {
    if (!start || !start.next) return start 
    let smallerHead = new ListNode()
    let sNode = smallerHead
    let biggerHead = new ListNode()
    let bNode = biggerHead
    let pivot = start.val
    let pointer = start.next
    while (pointer) {
        if (pointer.val<pivot) {
            sNode.next = pointer
            sNode = sNode.next 
        } else {
            bNode.next = pointer
            bNode = bNode.next
        }
        let temp = pointer.next
        pointer.next = null
        pointer = temp
    }
    return concat(quickSort2(smallerHead.next),start,quickSort2(biggerHead.next))
}

let concat = (head1,p,head2) => {
    p.next = head2
    if (!head1) return p
    let node = head1
    while (node && node.next) {
        node = node.next
    }
    node.next = p
    return head1
}


let head = [4,2,1,3]
console.log(listToArray(sortList4(arrayToList(head))))
