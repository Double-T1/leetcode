class Solution {
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<int> parent(n,-1);
        for (int i=0; i<n; i++) {
            if (parent[i] == -1) parent[i] = i;
            for (int j=0; j<n; j++) {
                if (i == j) continue;
                if (isConnected[i][j]) unite(i,j,parent);
            }
        }
         
        unordered_set<int> hashset;
        for (auto& num: parent) {
            num = find(num,parent);
            hashset.insert(num);
        }
        return hashset.size();
    }
    
    
private:
    int find(int x,vector<int>& parent) {
        if (parent[x] == -1) parent[x] = x;
        if (x != parent[x]) parent[x] = find(parent[x],parent);
        return parent[x];
    }
    
    void unite(int i, int j, vector<int>& parent) {
        int pi = find(i,parent), pj = find(j,parent);
        if (pi != pj) parent[pj] = pi;
    }
};

