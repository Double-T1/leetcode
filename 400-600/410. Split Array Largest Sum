//time: O(n*m*n) 
var splitArray = function(nums, m) {
    for (let i=1; i<nums.length; i++) {
        nums[i] += nums[i-1]
    }
    nums.unshift(0)
    return helper(nums,m)
};

let helper = (nums,m,i=1,memo=[]) => {
    if (m === 1) return nums[nums.length-1]-nums[i-1] 
    if (i === nums.length) return -1
    if (i in memo && m in memo[i]) return memo[i][m]
    if (memo[i] === undefined) memo[i] = []
    
    let ans = Number.MAX_SAFE_INTEGER
    for (let j=i; j<nums.length; j++) {
        let x= helper(nums,m-1,j+1,memo)
        if (x>=0) ans = Math.min(ans,Math.max(x,nums[j]-nums[i-1]))
    }
    memo[i][m] = ans === Number.MAX_SAFE_INTEGER? -1 : ans
    return memo[i][m]
}

//bottom-up with the same time and space complexity
var splitArray = function(nums, m) {
    for (let i=1; i<nums.length; i++) {
        nums[i] += nums[i-1]
    }
    nums.unshift(0)
    
    let dp = []
    for (let i=nums.length; i>0; i--) {
        dp[i] = [] 
        for (let p=m; p>0; p--) {
            if (p === 1) {
                dp[i][p] = nums[nums.length-1]-nums[i-1] 
                continue
            }
            dp[i][p] = Number.MAX_SAFE_INTEGER
            for (let j=i; j<nums.length; j++) {
                let x= dp[j+1][p-1] //j+1
                if (x>=0) dp[i][p] = Math.min(dp[i][p],Math.max(x,nums[j]-nums[i-1]))
            }
            if (dp[i][p] === Number.MAX_SAFE_INTEGER) dp[i][p] = -1
        }
    }
    return dp[1][m]
};

//O(n*log(sum-max))
var splitArray = function(nums, m) {
    let left = nums.reduce((accu,ele) => Math.max(accu,ele),0);   
    let right = nums.reduce((accu,ele) => accu+ele,0)+1;
    
    while (left<right) {
        let mid = left + Math.floor((right-left)/2);
        if (numOfSub(nums,mid)<=m) {
            right = mid
        } else {
            left = mid+1
        }
    }
    return right;
};

let numOfSub = (nums,val) => {
    let subs = 1, dup = val;
    for (let num of nums) {
        dup -= num
        if (dup<0) {
            subs++
            dup = val - num
        }
    }
    return subs
}
